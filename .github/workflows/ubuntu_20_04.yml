name: Ubuntu 20.04

on:
  pull_request:
    branches: [ main ]

jobs:
  software_cpp:
    name: Software C++
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0} # Source profile for each step
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: curl https://vcvrack.com/downloads/RackFree-2.4.0-lin-x64.zip | jar xv
      - run: chmod u+x ./Rack2Free/Rack
      - run: sudo apt-get update
      - run: sudo apt-get install libjack-jackd2-dev libpulse-dev
      - name: VCV Rack headless first run
        run: ./Rack -h <<< '\n'
        working-directory: Rack2Free
      - run: python3 build-system/install.py
      - run: erbb setup --with-apt
      - run: python build-system/install.py
      - name: test/micropatch
        run: erbb configure && erbb build && erbb build simulator
        working-directory: test/micropatch
      - name: test/seed2-dfm-eval-euro
        run: erbb configure && erbb build firmware && erbb build simulator
        working-directory: test/seed2-dfm-eval-euro
      - name: test/data
        run: erbb configure && erbb build && erbb build hardware
        working-directory: test/data
      - name: samples/bypass
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: samples/bypass
      - name: samples/drop
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: samples/drop
      - name: samples/reverb
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: samples/reverb
      - name: samples/kick
        run: erbb configure && erbb build && erbb build hardware && erbb build hardware --only-gerber && erbb build simulator
        working-directory: samples/kick
      - name: samples/custom
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: samples/custom
      - name: samples/frohmager
        run: erbb install simulator
        working-directory: samples/frohmager
      - name: erbb init
        run: mkdir init && cd init && erbb init --name Init && erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: samples
      - name: VCV Rack headless run
        run: ./Rack -h <<< '\n' && cat $HOME/.Rack2/log.txt
        working-directory: Rack2Free
      - name: Check micropatch
        run: grep "Loaded ErbPluginMicropatch" $HOME/.Rack2/log.txt
      - name: Check bypass
        run: grep "Loaded ErbPluginBypass" $HOME/.Rack2/log.txt
      - name: Check drop
        run: grep "Loaded ErbPluginDrop" $HOME/.Rack2/log.txt
      - name: Check reverb
        run: grep "Loaded ErbPluginReverb" $HOME/.Rack2/log.txt
      - name: Check kick
        run: grep "Loaded ErbPluginKick" $HOME/.Rack2/log.txt
      - name: Check custom
        run: grep "Loaded ErbPluginCustom" $HOME/.Rack2/log.txt
      - name: Check frohmager
        run: grep "Loaded ErbPluginFrohmager" $HOME/.Rack2/log.txt
      - name: Check init
        run: grep "Loaded ErbPluginInit" $HOME/.Rack2/log.txt

  software_faust:
    name: Software Faust
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0} # Source profile for each step
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: curl https://vcvrack.com/downloads/RackFree-2.4.0-lin-x64.zip | jar xv
      - run: chmod u+x ./Rack2Free/Rack
      - run: sudo apt-get update
      - run: sudo apt-get install libjack-jackd2-dev libpulse-dev faust
      - name: VCV Rack headless first run
        run: ./Rack -h <<< '\n'
        working-directory: Rack2Free
      - run: python3 build-system/install.py
      - run: erbb setup --with-apt
      - name: samples/faust
        run: erbb configure && erbb build && erbb build hardware && erbb build hardware --only-gerber && erbb build simulator
        working-directory: samples/faust
      - name: test/faust
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: test/faust
      - name: test/faust2
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: test/faust2
      - name: test/faust3
        run: erbb configure && erbb build && erbb build hardware && erbb build simulator
        working-directory: test/faust3
      - name: VCV Rack headless run
        run: ./Rack -h <<< '\n' && cat $HOME/.Rack2/log.txt
        working-directory: Rack2Free
      - name: Check faust
        run: grep "Loaded ErbPluginFaust" $HOME/.Rack2/log.txt
      - name: Check flanger
        run: grep "Loaded ErbPluginFlanger" $HOME/.Rack2/log.txt

  hardware:
    name: Hardware
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: sudo add-apt-repository --yes ppa:kicad/kicad-6.0-releases
      - run: sudo apt-get update
      - run: sudo apt-get install kicad libcairo2-dev libffi-dev libsndfile1
      - run: pip3 install -r requirements.txt
      - run: python boards/kivu12/build.py

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: sudo apt-get update
      - run: sudo apt-get install -y ninja-build
      - run: python test/unit/configure.py
      - run: python test/unit/build.py
      - run: python test/unit/run.py

  erbb_tests:
    name: Erbb/Erbui Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: sudo add-apt-repository --yes ppa:kicad/kicad-6.0-releases
      - run: sudo apt-get update
      - run: sudo apt-get install -y ninja-build
      - run: sudo apt-get install libglu1-mesa-dev
      - run: sudo apt install libcairo2-dev libffi-dev python3-dev
      - run: sudo apt-get install kicad
      - run: sudo apt-get install libsndfile1
      - run: python -m pip install -r requirements.txt
      - run: python -m pip install coverage
      - run: mkdir -p ~/.local/share/fonts/
      - run: cp include/erb/vcvrack/design/d-din/*.otf ~/.local/share/fonts
      - run: cp include/erb/vcvrack/design/indie-flower/*.ttf ~/.local/share/fonts
      - run: python build-system/test.py
      - run: python build-system/cover.py
      - run: python test/vcvrack/configure.py
      - run: python test/vcvrack/build.py
